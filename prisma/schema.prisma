generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Animal {
  id               String           @id @default(uuid())
  name             String
  breeds           String[]
  adoptionStatus   AdoptionStatus   @default(AVAILABLE)
  careStatus       CareStatus       @default(ACTIVE)
  shelterId        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  biography        String
  dateOfBirth      DateTime?
  imageSrcs        String[]
  intakeCategory   IntakeCategory
  intakeDate       DateTime?
  outcomeCategory  OutcomeCategory?
  outcomeDate      DateTime?
  outcomeNotes     String?
  placementInfo    PlacementInfo[]
  primaryImageSrc  String?
  sex              Sex
  spayNeuterStatus Boolean
  species          Species          @default(OTHER)
  locationId       String?
  location         Location?        @relation(fields: [locationId], references: [id])
  shelter          Shelter          @relation(fields: [shelterId], references: [id])
  events           AnimalEvent[]
  animalFlag       AnimalFlag[]
  animalTasks      AnimalTask[]
  behaviorEvent    BehaviorEvent[]
  behaviorItems    BehaviorItem[]
  medicalItems     MedicalItem[]
}

model Shelter {
  id                 String              @id @default(uuid())
  name               String
  phone              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  addressLine1       String
  addressLine2       String?
  city               String
  country            String
  email              String?
  state              String
  zipCode            String
  animals            Animal[]
  shelterRoles       ShelterRole[]
  shelterUsers       ShelterUser[]
  shelterUserInvites ShelterUserInvite[]
  locations          Location[]
  tasks              Task[]
  users              User[]              @relation("ShelterUsers")
}

model Task {
  id                String           @id @default(uuid())
  title             String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  staffId           String?
  shelterId         String?
  assignment        TaskAssignment[]
  frequency         TaskFrequency
  roleRestrictions  String[]
  staffRestrictions String[]
  type              TaskType[]
  description       String?
  notes             String?
  dueDate           DateTime?
  dueTime           String?
  animalTasks       AnimalTask[]
  Shelter           Shelter?         @relation(fields: [shelterId], references: [id])
  Staff             Staff?           @relation(fields: [staffId], references: [id])
  userTasks         UserTask[]
  LocationTask      LocationTask[]
}

model Flag {
  id          String       @id @default(uuid())
  title       String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  animalFlag  AnimalFlag[]
}

model Staff {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  animalTasks   AnimalTask[]
  tasks         Task[]
  userTasks     UserTask[]
  locationTasks LocationTask[]
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  shelterId       String?
  firstName       String
  lastName        String
  preferredName   String
  pronouns        String?
  phone           String?
  profileImageSrc String?
  password        String?
  accounts        Account[]
  sessions        Session[]
  shelterUsers    ShelterUser[]
  userTasks       UserTask[]
  shelters        Shelter[]     @relation("ShelterUsers")
}

model ShelterUser {
  id                 String              @id @default(uuid())
  shelterId          String
  userId             String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  roleId             String?
  isAdmin            Boolean             @default(false)
  isStaff            Boolean             @default(false)
  isVolunteer        Boolean             @default(false)
  permissions        String[]
  Role               Role?               @relation(fields: [roleId], references: [id])
  shelter            Shelter             @relation(fields: [shelterId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  shelterUserInvites ShelterUserInvite[]
}

model Role {
  id           String        @id @default(uuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String?
  permissions  String[]
  shelterRoles ShelterRole[]
  shelterUser  ShelterUser[]
}

model ShelterRole {
  id          String   @id @default(uuid())
  shelterId   String
  roleId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  permissions String[]
  role        Role     @relation(fields: [roleId], references: [id])
  shelter     Shelter  @relation(fields: [shelterId], references: [id])
}

model AnimalTask {
  id                  String        @id @default(uuid())
  title               String
  status              TaskStatus
  staffId             String?
  animalId            String
  taskId              String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  dueDate             DateTime?
  completedByUserId   String?
  createdByUserId     String?
  lastUpdatedByUserId String?
  animal              Animal        @relation(fields: [animalId], references: [id], onDelete: Cascade)
  staff               Staff?        @relation(fields: [staffId], references: [id])
  task                Task          @relation(fields: [taskId], references: [id])
  userTasks           UserTask[]
  LocationTask        LocationTask? @relation(fields: [locationTaskId], references: [id])
  locationTaskId      String?

  @@unique([animalId, taskId])
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserTask {
  id           String     @id @default(uuid())
  title        String
  status       TaskStatus
  userId       String
  taskId       String
  animalTaskId String
  staffId      String?
  assignedBy   String?
  completedBy  String?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  dueDate        DateTime?
  animalTask     AnimalTask    @relation(fields: [animalTaskId], references: [id], map: "UserTask_animalTaskId_fkey")
  staff          Staff?        @relation(fields: [staffId], references: [id])
  task           Task          @relation(fields: [taskId], references: [id], map: "UserTask_taskId_fkey")
  user           User          @relation(fields: [userId], references: [id])
  LocationTask   LocationTask? @relation(fields: [locationTaskId], references: [id])
  locationTaskId String?

  @@unique([userId, taskId])
}

model ShelterUserInvite {
  id            String       @id @default(uuid())
  shelterId     String
  email         String
  shelterUserId String?
  token         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isAdmin       Boolean      @default(false)
  isStaff       Boolean      @default(false)
  isVolunteer   Boolean      @default(false)
  permissions   String[]
  shelter       Shelter      @relation(fields: [shelterId], references: [id])
  shelterUser   ShelterUser? @relation(fields: [shelterUserId], references: [id])

  @@unique([shelterId, email])
}

model AnimalFlag {
  id        String   @id @default(uuid())
  animalId  String
  flagId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animal    Animal   @relation(fields: [animalId], references: [id])
  flag      Flag     @relation(fields: [flagId], references: [id])
}

model AnimalEvent {
  id        String   @id @default(uuid())
  title     String
  date      DateTime
  animalId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animal    Animal   @relation(fields: [animalId], references: [id])
}

model MedicalItem {
  id        String   @id @default(uuid())
  name      String
  quantity  Int
  animalId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animal    Animal   @relation(fields: [animalId], references: [id])
}

model BehaviorItem {
  id          String  @id @default(uuid())
  title       String
  description String?
  animalId    String?
  animal      Animal? @relation(fields: [animalId], references: [id])
}

model BehaviorEvent {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  animalId    String?
  animal      Animal?  @relation(fields: [animalId], references: [id])
}

model Location {
  id             String         @id @default(uuid())
  name           String?
  type           LocationType?
  capacity       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  currentAnimals Animal[]
  locationTasks  LocationTask[]
  Shelter        Shelter?       @relation(fields: [shelterId], references: [id])
  shelterId      String?
}

model LocationTask {
  id                  String       @id @default(uuid())
  title               String
  status              TaskStatus
  staffId             String?
  locationId          String
  taskId              String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  dueDate             DateTime?
  completedByUserId   String?
  createdByUserId     String?
  lastUpdatedByUserId String?
  location            Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  staff               Staff?       @relation(fields: [staffId], references: [id])
  task                Task         @relation(fields: [taskId], references: [id])
  userTasks           UserTask[]
  animalTasks         AnimalTask[]

  @@unique([locationId, taskId])
}

enum AdoptionStatus {
  AVAILABLE
  PENDING
  ADOPTED
}

enum TaskStatus {
  INCOMPLETE
  IN_PROGRESS
  COMPLETED
}

enum TaskFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  ONE_TIME
}

enum TaskAssignment {
  ALL_ANIMALS
  ALL_DOGS
  ALL_CATS
  ALL_OTHERS
}

enum TaskType {
  INTAKE
  GENERAL_CARE
  MEDICAL
  BEHAVIORAL
  ADOPTION
  ADMIN
  OTHER
}

enum Species {
  DOG
  CAT
  RABBIT
  BIRD
  HAMSTER
  GUINEA_PIG
  RAT
  REPTILE
  OTHER
}

enum Sex {
  MALE
  FEMALE
}

enum IntakeCategory {
  STRAY
  SURRENDER
  TRANSFER
  BORN_IN_SHELTER
  RETURN
  OTHER
}

enum OutcomeCategory {
  ADOPTION
  RETURN
  TRANSFER
  MEDICAL_EUTHANASIA
  BEHAVIORAL_EUTHANASIA
  CAPACITY_EUTHANASIA
  OTHER_EUTHANASIA
  OTHER
}

enum PlacementInfo {
  GOOD_WITH_DOGS
  GOOD_WITH_CATS
  GOOD_WITH_KIDS
  GOOD_WITH_OTHER_ANIMALS
  HOUSETRAINED
  CRATE_TRAINED
  LEASH_TRAINED
  SPECIAL_NEEDS
  HIGH_ENERGY
}

enum LocationType {
  KENNEL
  FOSTER
  CAGE
  ROOM
  TANK
}

enum CareStatus {
  ACTIVE
  INACTIVE
}
